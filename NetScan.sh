#!/bin/bash

function ip_or_file () {
# Check if cli arg is a file or a single ip
# if the file doesnt exist assume* its an ip
# * subject to change as assumptions are not ideal
if [[ -f $1 ]]; then
    file=true
    # Ensures the original is not overwritten on subsequent runs
    if [[ ! -f "${1}.orig" ]]; then
        # create a backup of iplist before removing spaces/blank lines
        cp "$1" "${1}.orig"
    fi
    # remove whitespace at the end of lines
    sed -i 's/[[:blank:]]*$//' "$1"
    # remove blank lines in file
    sed -i '/^[[:space:]]*$/d' "$1"
    # convert return characters from dos (\c\r) to unix (\n)
    dos2unix "$1"
elif [ ! -f "$1" ] && [[ $1 =~ ^(([1-9]?[0-9]|1[0-9][0-9]|2([0-4][0-9]|5[0-5]))\.){3}([1-9]?[0-9]|1[0-9][0-9]|2([0-4][0-9]|5[0-5]))$ ]]; then
    # check if parameter is a valid ip address
    # and is NOT the name of a file
    file=false
else
    echo "file does not exist or ip address is invalid"
    exit
fi
}

function standard_scan {

local host="$line"
echo "Creating Directory for ip address of $host"
mkdir $host
echo "Traversing into Directory of $host"
cd $host
echo "Scanning All TCPPorts"
nmap -p- -v -oN AllTCPPorts --host-timeout 10m $host
echo "Scanning TCPPorts Done!"
#echo "Scanning top 999 UDP ports"
#sudo nmap -sU -v -top-ports 999 -oN udp1 $host
#echo "Scanning Top UDP ports Done!"
echo "Scanning for Vulnerabilities"
nmap --script vuln -v -oN VulnScan $host
echo "Scanning for Vulns done!"
echo "Scanning for Malware-Host"
nmap -sV --script=http-malware-host -v -oN MalwareHost $host
echo "Scanning for Malware-Host done!"
echo "Scanning for Slowloris"
nmap --script http-slowloris-check -v -oN Slowloris $host
echo "Scanning for Slowloris done!"
echo "Scanning for Telnet"
nmap -p 23 --script telnet-encryption -v -oN TelnetEncrypt $host
echo "Scanning for Telnet done!"
echo "All Scanning Completed for $host, exiting directory"
sleep 1

cd ..
echo "Merging results into ${host}-MergedResults.txt"
cat "${host}"/*.txt > "${host}-MergedResults.txt"
}

echo "Commencing Startup"
# pass the first parameter of the script
# along to the ip_or_file function
ip_or_file $1
Network_File="$1"

echo "ip addresses ready"

if [ "$file" = "true" ]; then
# if a file of ip addresses is provided, read it line by line
    while read -r line; do
        echo "Starting scanning of IP address: $line"
        standard_scan
    done < $Network_File
else
    # if a single ip is provided, read it as is
    line="$1"
    standard_scan
fi

echo "All scanning complete! Merged results can be found in the top level directory - $(pwd)"
